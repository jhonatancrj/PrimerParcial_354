# -*- coding: utf-8 -*-
"""RESPUESTA_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AVCUcSz1YP7F4Loj_6nySlIvmDOzSXFn
"""

from google.colab import drive
drive.mount('/content/drive')

!ls "/content/drive/MyDrive/datos"

import re

# Función para leer archivo ARFF manualmente
def read_arff(file_path):
    data = []
    attributes = []
    in_data_section = False

    with open(file_path, 'r') as file:
        for line in file:
            line = line.strip()
            if line.startswith('@attribute'):
                attr_info = re.findall(r'@attribute\s+(\w+)\s+(.+)', line, re.IGNORECASE)
                if attr_info:
                    attr_name, attr_type = attr_info[0]
                    attributes.append((attr_name, attr_type))
            elif line.lower().startswith('@data'):
                in_data_section = True
            elif in_data_section and line:
                data.append(line.split(','))
    return attributes, data

# Ruta del archivo en Drive
file_path = '/content/drive/MyDrive/datos/diabetes_datos.arff'

# Cargar el archivo
attributes, data = read_arff(file_path)

def label_encoder(column):
    unique_vals = sorted(set(column))
    mapping = {val: idx for idx, val in enumerate(unique_vals)}
    return [mapping[val] for val in column]

def one_hot_encoder(column):
    unique_vals = sorted(set(column))
    encoded_columns = []
    for val in column:
        encoded_row = [1 if val == unique else 0 for unique in unique_vals]
        encoded_columns.append(encoded_row)
    return encoded_columns

def discretize_column(column, bins):
    min_val, max_val = min(column), max(column)
    bin_size = (max_val - min_val) / bins
    bin_edges = [min_val + i * bin_size for i in range(bins+1)]

    discretized_column = []
    for val in column:
        for i in range(bins):
            if bin_edges[i] <= val < bin_edges[i+1]:
                discretized_column.append(i)
                break
    return discretized_column

def normalize_column(column):
    min_val, max_val = min(column), max(column)
    return [(val - min_val) / (max_val - min_val) for val in column]

# Extraer columnas específicas
age_col = [int(row[0]) for row in data]  # "Age"
sex_col = [row[1] for row in data]       # "Sex"
bmi_col = [int(row[4]) for row in data]  # "BMI"

# Aplicar LabelEncoder a 'Sex'
sex_encoded = label_encoder(sex_col)

# Aplicar OneHotEncoder a 'Sex'
sex_one_hot_encoded = one_hot_encoder(sex_col)

# Discretizar 'Age' en 3 categorías
age_discretized = discretize_column(age_col, bins=3)

# Normalizar 'BMI'
bmi_normalized = normalize_column(bmi_col)

# Imprimir los resultados
print('LabelEncoded Sex:', sex_encoded)
print('OneHotEncoded Sex:', sex_one_hot_encoded)
print('Discretized Age:', age_discretized)
print('Normalized BMI:', bmi_normalized)