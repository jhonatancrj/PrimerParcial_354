# -*- coding: utf-8 -*-
"""RESPUESTA_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Idk3ZIMlUdfyzSRRNbQoDsG_O-AbBLK4
"""

from google.colab import drive
drive.mount('/content/Drive')

"/content/Drive/MyDrive/datos/diabetes_data.csv"

import pandas as pd

# Cargar el dataset desde Google Drive
data = pd.read_csv("/content/Drive/MyDrive/datos/diabetes_data.csv")

# Mostrar las primeras filas para verificar que se cargó correctamente
data.head()

# Función para calcular el percentil manualmente
def calcular_percentil(columna, percentil):
    datos_ordenados = sorted(columna)
    n = len(datos_ordenados)
    pos = (n - 1) * (percentil / 100)
    pos_entera = int(pos)
    pos_decimal = pos - pos_entera

    if pos_entera + 1 < n:
        return datos_ordenados[pos_entera] + (datos_ordenados[pos_entera + 1] - datos_ordenados[pos_entera]) * pos_decimal
    else:
        return datos_ordenados[pos_entera]

# Función para calcular los cuartiles
def calcular_cuartiles(columna):
    Q1 = calcular_percentil(columna, 25)
    Q2 = calcular_percentil(columna, 50)  # Mediana
    Q3 = calcular_percentil(columna, 75)
    return Q1, Q2, Q3

# Calcular percentiles y cuartiles para cada columna numérica
percentiles = {}
cuartiles = {}

for col in data.columns:
    if pd.api.types.is_numeric_dtype(data[col]):  # Solo columnas numéricas
        percentiles[col] = {
            'P25': calcular_percentil(data[col], 25),
            'P50': calcular_percentil(data[col], 50),
            'P75': calcular_percentil(data[col], 75)
        }
        cuartiles[col] = calcular_cuartiles(data[col])

# Mostrar los resultados
print("Percentiles:", percentiles)
print("Cuartiles:", cuartiles)

import matplotlib.pyplot as plt

# Graficar cada columna numérica
for col in data.columns:
    if pd.api.types.is_numeric_dtype(data[col]):
        plt.figure(figsize=(8, 4))
        plt.hist(data[col], bins=30, alpha=0.7, label=col, color='blue')
        plt.title(f'Distribución de {col}')
        plt.xlabel(col)
        plt.ylabel('Frecuencia')
        plt.legend()
        plt.grid(True)
        plt.show()

import seaborn as sns

# Graficar la dispersión entre dos columnas
def graficar_dispersión(df, columna_x, columna_y):
    sns.scatterplot(x=df[columna_x], y=df[columna_y])
    plt.title(f'Dispersión entre {columna_x} y {columna_y}')
    plt.xlabel(columna_x)
    plt.ylabel(columna_y)
    plt.show()

# Ejemplo entre 'Glucose' y 'BMI'
graficar_dispersión(data, 'GenHlth', 'BMI')

# Generar un mapa de calor para las correlaciones entre las columnas
plt.figure(figsize=(10, 8))
correlacion = data.corr()

sns.heatmap(correlacion, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Mapa de Calor de Correlaciones')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from scipy import stats
import seaborn as sns

# Cálculo de media, mediana y moda para BloodPressure
media_bp = data['Diabetes'].mean()
mediana_bp = data['Diabetes'].median()
moda_bp = data['Diabetes'].mode()[0]

print(f"Diabetes")
print(f"Mediae: {media_bp}")
print(f"Mediana: {mediana_bp}")
print(f"Moda: {moda_bp}")

# Cálculo de media, mediana y moda para SkinThickness
media_st = data['BMI'].mean()
mediana_st = data['BMI'].median()
moda_st = data['BMI'].mode()[0]

print(f"BMI")
print(f"Media: {media_st}")
print(f"Mediana: {mediana_st}")
print(f"Moda: {moda_st}")

# Cálculo de media, mediana y moda para SkinThickness
media_st = data['Veggies'].mean()
mediana_st = data['Veggies'].median()
moda_st = data['Veggies'].mode()[0]

print(f"Veggies")
print(f"Media: {media_st}")
print(f"Mediana: {mediana_st}")
print(f"Moda: {moda_st}")

# Definir la función para graficar el diagrama de cajas y bigotes
def graficar_cajas(df, columnas):
    df[columnas].boxplot()
    plt.title('Diagrama de Cajas y Bigotes')
    plt.show()

# Graficar el diagrama para las columnas seleccionadas
# Use lower case for column names 'glucose', 'bloodpressure', and 'skinthickness'
graficar_cajas(data, ['Diabetes', 'BMI', 'Veggies', 'Smoker'])