# -*- coding: utf-8 -*-
"""PREGUNTA_7incisoayb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rJJpoqLWnmlkLr7jpgp9EtKgvS6Uwg02
"""

!pip install deap

import random
from deap import base, creator, tools, algorithms
import numpy as np

# Función objetivo: f(x) = x^(2x) - 1
def objective_function(individual):
    x = individual[0]
    return x ** (2 * x) - 1,

# Crear la clase "FitnessMax" para maximizar la función
creator.create("FitnessMax", base.Fitness, weights=(1.0,))

# Crear el individuo (solución) como una lista con un valor
creator.create("Individual", list, fitness=creator.FitnessMax)

# Toolbox para definir los operadores genéticos
toolbox = base.Toolbox()

# Atributo: un número aleatorio entre 0 y 5
toolbox.register("attr_float", random.uniform, 0, 5)

# Estructura del individuo: un único atributo
toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_float, 1)

# Población: 20 individuos
toolbox.register("population", tools.initRepeat, list, toolbox.individual, 20)

# Evaluación de la aptitud
toolbox.register("evaluate", objective_function)

# Operadores genéticos: cruce, mutación, y selección
toolbox.register("mate", tools.cxBlend, alpha=0.5)  # Cruce
toolbox.register("mutate", tools.mutGaussian, mu=0, sigma=0.5, indpb=0.2)  # Mutación
toolbox.register("select", tools.selTournament, tournsize=3)  # Selección por torneo

# Ejecutar el algoritmo genético
def main():
    random.seed(42)

    # Generar la población inicial
    population = toolbox.population()

    # Aplicar el algoritmo genético
    result_population, logbook = algorithms.eaSimple(
        population, toolbox, cxpb=0.5, mutpb=0.2, ngen=3, verbose=True
    )

    # Mostrar los mejores individuos
    best_individuals = tools.selBest(result_population, k=3)
    for i, ind in enumerate(best_individuals, 1):
        print(f"Mejor individuo {i}: {ind}, Fitness: {ind.fitness.values[0]}")

if __name__ == "__main__":
    main()

import numpy as np
import random

# Función objetivo: f(x) = x^(2x) - 1
def objective_function(x):
    return x**(2*x) - 1

# Generar la población inicial (20 números aleatorios entre 0 y 5)
def generate_population(size, low, high):
    return np.random.uniform(low, high, size)

# Selección de los mejores individuos (tomamos los 10 mejores)
def selection(population, fitness, num_to_select):
    selected_indices = np.argsort(fitness)[-num_to_select:]
    return population[selected_indices]

# Cruce (promedio entre pares de los mejores)
def crossover(parents):
    offspring = []
    for i in range(len(parents)//2):
        parent1 = parents[2*i]
        parent2 = parents[2*i + 1]
        child = (parent1 + parent2) / 2
        offspring.append(child)
    return np.array(offspring)

# Mutación (añadir un valor aleatorio pequeño)
def mutation(offspring, mutation_rate=0.1):
    return offspring + np.random.uniform(-mutation_rate, mutation_rate, size=offspring.shape)

# Ejecutar el algoritmo genético por tres generaciones
def genetic_algorithm(generations=3, population_size=20, num_parents=10, mutation_rate=0.5):
    # Población inicial
    population = generate_population(population_size, 0, 5)

    for generation in range(generations):
        # Evaluar la población
        fitness = objective_function(population)

        # Mostrar la población y el fitness de esta generación
        print(f"Generación {generation + 1}:")
        for i, (ind, fit) in enumerate(zip(population, fitness), 1):
            print(f"Individuo {i}: x = {ind:.4f}, Fitness = {fit:.4f}")

        # Seleccionar los mejores individuos
        parents = selection(population, fitness, num_parents)

        # Cruce
        offspring = crossover(parents)

        # Mutación
        offspring = mutation(offspring, mutation_rate)

        # Nueva población: los padres seleccionados más la nueva descendencia
        population = np.concatenate((parents, offspring))
        print()

    # Resultados finales
    best_individual = population[np.argmax(objective_function(population))]
    print(f"Mejor individuo final: x = {best_individual:.4f}, Fitness = {objective_function(best_individual):.4f}")

# Ejecutar el algoritmo genético
genetic_algorithm()



